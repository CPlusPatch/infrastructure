{
  pkgs,
  lib,
  config,
  ...
}: let
  inherit (import ../lib/ips.nix) ips;
in {
  imports = [
    ../secrets/fitbit-fetch.nix
  ];

  sops.templates.fitbit-fetch-data-env = {
    content = ''
      AUTO_DATE_RANGE=True
      CLIENT_ID=${config.sops.placeholder."fitbit-fetch/client_id"}
      CLIENT_SECRET=${config.sops.placeholder."fitbit-fetch/client_secret"}
      DEVICENAME=Pixel Watch 3
      FITBIT_LOG_FILE_PATH=/app/logs/fitbit.log
      INFLUXDB_DATABASE=FitbitHealthStats
      INFLUXDB_HOST=${ips.freeman}
      INFLUXDB_PASSWORD=${config.sops.placeholder."fitbit-fetch/influxdb_password"}
      INFLUXDB_PORT=8086
      INFLUXDB_USERNAME=fitbit
      INFLUXDB_VERSION=1
      LOCAL_TIMEZONE=Automatic
      TOKEN_FILE_PATH=/app/tokens/fitbit.token
    '';
  };

  virtualisation.oci-containers.containers."fitbit-fetch-data" = {
    image = "thisisarpanghosh/fitbit-fetch-data:latest";
    environmentFiles = [
      config.sops.templates.fitbit-fetch-data-env.path
    ];
    volumes = [
      "/etc/timezone:/etc/timezone:ro"
      "/var/lib/fitbit-fetch/logs:/app/logs:rw"
      "/var/lib/fitbit-fetch/tokens:/app/tokens:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=fitbit-fetch-data"
      "--network=fitbit-prometheus_default"
    ];
  };
  systemd.services."docker-fitbit-fetch-data" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-fitbit-prometheus_default.service"
    ];
    requires = [
      "docker-network-fitbit-prometheus_default.service"
    ];
    partOf = [
      "docker-compose-fitbit-prometheus-root.target"
    ];
    wantedBy = [
      "docker-compose-fitbit-prometheus-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-fitbit-prometheus_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f fitbit-prometheus_default";
    };
    script = ''
      docker network inspect fitbit-prometheus_default || docker network create fitbit-prometheus_default
    '';
    partOf = ["docker-compose-fitbit-prometheus-root.target"];
    wantedBy = ["docker-compose-fitbit-prometheus-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-fitbit-prometheus-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
