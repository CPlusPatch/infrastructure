{
  pkgs,
  lib,
  config,
  ...
}: {
  imports = [
    ../secrets/docker.nix
    ../secrets/postgresql/sharelists.nix
  ];

  sops.templates.sharelists_postgres_env = {
    content = ''
      POSTGRES_DB=sharelists
      POSTGRES_PASSWORD=${config.sops.placeholder."postgresql/sharelists"}
      POSTGRES_USER=postgres
    '';
  };

  virtualisation.oci-containers.containers."sharelists" = {
    image = "ghcr.io/cpluspatch/sharelists:main";
    volumes = [
      "/var/lib/sharelists/config.toml:/app/dist/config/config.toml:rw"
    ];
    ports = [
      "127.0.0.1:2873:3000/tcp"
    ];
    dependsOn = [
      "sharelists-postgres"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=sharelists"
      "--network=sharelists_default"
    ];
    login = {
      username = "cpluspatch";
      registry = "https://ghcr.io";
      passwordFile = config.sops.secrets."docker/ghcr".path;
    };
  };

  systemd.services."docker-sharelists" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-sharelists_default.service"
      "docker-volume-sharelists_sharelists-logs.service"
    ];
    requires = [
      "docker-network-sharelists_default.service"
      "docker-volume-sharelists_sharelists-logs.service"
    ];
    partOf = [
      "docker-compose-sharelists-root.target"
    ];
    wantedBy = [
      "docker-compose-sharelists-root.target"
    ];
  };

  virtualisation.oci-containers.containers."sharelists-postgres" = {
    image = "postgres:17-alpine";
    environmentFiles = [
      config.sops.templates.sharelists_postgres_env.path
    ];
    volumes = [
      "sharelists_sharelists-postgres:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=postgres"
      "--network=sharelists_default"
    ];
  };

  systemd.services."docker-sharelists-postgres" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-sharelists_default.service"
      "docker-volume-sharelists_sharelists-postgres.service"
    ];
    requires = [
      "docker-network-sharelists_default.service"
      "docker-volume-sharelists_sharelists-postgres.service"
    ];
    partOf = [
      "docker-compose-sharelists-root.target"
    ];
    wantedBy = [
      "docker-compose-sharelists-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-sharelists_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f sharelists_default";
    };
    script = ''
      docker network inspect sharelists_default || docker network create sharelists_default
    '';
    partOf = ["docker-compose-sharelists-root.target"];
    wantedBy = ["docker-compose-sharelists-root.target"];
  };

  # Volumes
  systemd.services."docker-volume-sharelists_sharelists-logs" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect sharelists_sharelists-logs || docker volume create sharelists_sharelists-logs
    '';
    partOf = ["docker-compose-sharelists-root.target"];
    wantedBy = ["docker-compose-sharelists-root.target"];
  };

  systemd.services."docker-volume-sharelists_sharelists-postgres" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect sharelists_sharelists-postgres || docker volume create sharelists_sharelists-postgres
    '';
    partOf = ["docker-compose-sharelists-root.target"];
    wantedBy = ["docker-compose-sharelists-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-sharelists-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };

  modules.haproxy.acls.sharelists = ''
    acl is_sharelists hdr(host) -i api.sl.cpluspatch.dev
    use_backend sharelists if is_sharelists
  '';

  modules.haproxy.backends.sharelists = ''
    backend sharelists
      server sharelists 127.0.0.1:2873
  '';

  security.acme.certs."api.sl.cpluspatch.dev" = {};
}
